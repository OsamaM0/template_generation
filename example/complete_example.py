"""
Complete Template Generation Example

This script demonstrates how to use all available templates including the new mind map functionality.
"""

import json
from ..generators.template_generator import TemplateGenerator

def comprehensive_example():
    """Generate all template types for the same content."""
    
    # Sample educational content
    sample_content = """
    ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸÅŸä ÿßŸÑÿ™ÿπŸÑŸäŸÖ

    ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä (AI) ŸäŸèÿ≠ÿØÿ´ ÿ´Ÿàÿ±ÿ© ŸÅŸä ŸÖÿ¨ÿßŸÑ ÿßŸÑÿ™ÿπŸÑŸäŸÖ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿ™ŸàŸÅŸäÿ± ÿ≠ŸÑŸàŸÑ ŸÖÿ®ÿ™ŸÉÿ±ÿ© ŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ÿπŸÖŸÑŸäÿ© ÿßŸÑÿ™ÿπŸÑŸÖ ŸàÿßŸÑÿ™ÿπŸÑŸäŸÖ.

    ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©:
    1. ÿßŸÑÿ™ÿπŸÑŸÖ ÿßŸÑŸÖÿÆÿµÿµ - ÿ™ÿÆÿµŸäÿµ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿ≠ÿ≥ÿ® ÿßÿ≠ÿ™Ÿäÿßÿ¨ÿßÿ™ ŸÉŸÑ ÿ∑ÿßŸÑÿ®
    2. ÿßŸÑÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿ¢ŸÑŸä - ÿ™ÿµÿ≠Ÿäÿ≠ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜÿßÿ™ Ÿàÿ™ŸàŸÅŸäÿ± ÿ™ÿ∫ÿ∞Ÿäÿ© ÿ±ÿßÿ¨ÿπÿ© ŸÅŸàÿ±Ÿäÿ©
    3. ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ© ÿßŸÑÿ∞ŸÉŸäÿ© - ÿ±Ÿàÿ®Ÿàÿ™ÿßÿ™ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© ŸÑŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÑŸâ ÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿ∑ŸÑÿßÿ®
    4. ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ÿπŸÑŸäŸÖŸäÿ© - ŸÅŸáŸÖ ÿ£ŸÜŸÖÿßÿ∑ ÿßŸÑÿ™ÿπŸÑŸÖ Ÿàÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑŸÖŸÜÿßŸáÿ¨

    ÿßŸÑŸÅŸàÿßÿ¶ÿØ:
    - ÿ™ÿ≠ÿ≥ŸäŸÜ ÿ¨ŸàÿØÿ© ÿßŸÑÿ™ÿπŸÑŸäŸÖ
    - ÿ≤ŸäÿßÿØÿ© ÿßŸÑŸÉŸÅÿßÿ°ÿ© ŸÅŸä ÿßŸÑÿπŸÖŸÑŸäÿ© ÿßŸÑÿ™ÿπŸÑŸäŸÖŸäÿ©
    - ÿ™ŸàŸÅŸäÿ± ÿßŸÑŸàŸÇÿ™ ŸÑŸÑŸÖÿπŸÑŸÖŸäŸÜ
    - ÿØÿπŸÖ ÿßŸÑÿ™ÿπŸÑŸÖ ÿßŸÑŸÖÿ≥ÿ™ŸÖÿ±

    ÿßŸÑÿ™ÿ≠ÿØŸäÿßÿ™:
    - ÿßŸÑÿ≠ÿßÿ¨ÿ© ÿ•ŸÑŸâ ÿßŸÑÿ™ÿØÿ±Ÿäÿ® ÿßŸÑÿ™ŸÇŸÜŸä
    - ÿßŸÑŸÇÿ∂ÿßŸäÿß ÿßŸÑÿ£ÿÆŸÑÿßŸÇŸäÿ© ŸàÿßŸÑÿÆÿµŸàÿµŸäÿ©
    - ÿßŸÑÿ™ŸÉŸÑŸÅÿ© ÿßŸÑÿπÿßŸÑŸäÿ© ŸÑŸÑÿ™ŸÜŸÅŸäÿ∞
    - ŸÖŸÇÿßŸàŸÖÿ© ÿßŸÑÿ™ÿ∫ŸäŸäÿ± ŸÖŸÜ ÿ®ÿπÿ∂ ÿßŸÑŸÖÿπŸÑŸÖŸäŸÜ
    """
    
    # Learning goals for goal-based templates
    learning_goals = [
        "ŸÅŸáŸÖ ÿßŸÑÿ∑ŸÑÿßÿ® ŸÑŸÖŸÅŸáŸàŸÖ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸÅŸä ÿßŸÑÿ™ÿπŸÑŸäŸÖ",
        "ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ŸÑŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸÅŸä ÿßŸÑÿ™ÿπŸÑŸäŸÖ",
        "ÿ™ŸÇŸäŸäŸÖ ŸÅŸàÿßÿ¶ÿØ Ÿàÿ™ÿ≠ÿØŸäÿßÿ™ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸÅŸä ÿßŸÑÿ™ÿπŸÑŸäŸÖ",
        "ÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑŸÖÿπÿ±ŸÅÿ© ÿ≠ŸàŸÑ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸÅŸä ÿ≥ŸäÿßŸÇÿßÿ™ ÿ™ÿπŸÑŸäŸÖŸäÿ© ŸÖÿÆÿ™ŸÑŸÅÿ©"
    ]
    
    print("üöÄ Comprehensive Template Generation Example")
    print("=" * 60)
    
    # Initialize generator
    generator = TemplateGenerator()
    
    results = {}
    
    try:
        # 1. Generate Questions
        print("\nüìù 1. Generating Question Bank...")
        questions = generator.generate_question_bank(
            content=sample_content,
            goals=learning_goals,
            question_counts={
                "multiple_choice": 4,
                "short_answer": 3,
                "complete": 2,
                "true_false": 3
            }
        )
        results["questions"] = questions
        print(f"   ‚úÖ Generated {sum(len(v) for k, v in questions.items() if isinstance(v, list))} questions")
        
        # 2. Generate Goal-Based Questions
        print("\nüéØ 2. Generating Goal-Based Questions...")
        goal_based_questions = generator.generate_goal_based_questions(
            content=sample_content,
            goals=learning_goals,
            question_counts={
                "multiple_choice": 6,
                "short_answer": 4,
                "complete": 2,
                "true_false": 2
            }
        )
        results["goal_based_questions"] = goal_based_questions
        print(f"   ‚úÖ Generated {goal_based_questions.get('_goal_based_metadata', {}).get('total_questions', 0)} questions for {len(goal_based_questions.get('learning_goals', []))} goals")
        
        # 3. Generate Worksheet
        print("\nüìã 3. Generating Worksheet...")
        worksheet = generator.generate_worksheet(
            content=sample_content,
            goals=learning_goals
        )
        results["worksheet"] = worksheet
        print(f"   ‚úÖ Generated worksheet with {len(worksheet.get('goals', []))} goals and {len(worksheet.get('applications', []))} applications")
        
        # 4. Generate Summary
        print("\nüìÑ 4. Generating Summary...")
        summary = generator.generate_summary(content=sample_content)
        results["summary"] = summary
        print("   ‚úÖ Generated summary with opening, main content, and conclusion")
        
        # 5. Generate Mind Map (NEW!)
        print("\nüß† 5. Generating Mind Map...")
        mindmap = generator.generate_mindmap(content=sample_content)
        results["mindmap"] = mindmap
        print(f"   ‚úÖ Generated mind map with {len(mindmap.get('nodeDataArray', []))} nodes")
        
        # Print detailed results
        print("\n" + "=" * 60)
        print("üìä DETAILED RESULTS")
        print("=" * 60)
        
        # Questions summary
        print("\nüìù QUESTION BANK:")
        for q_type, questions_list in questions.items():
            if isinstance(questions_list, list) and questions_list:
                print(f"   {q_type.replace('_', ' ').title()}: {len(questions_list)} questions")
        
        # Goal-based questions summary
        print("\nüéØ GOAL-BASED QUESTIONS:")
        goal_mappings = goal_based_questions.get('goal_question_mapping', [])
        for mapping in goal_mappings:
            print(f"   ‚Ä¢ {mapping.get('goal_text', '')[:50]}...")
            print(f"     Questions: {mapping.get('question_count', 0)} total")
        
        # Worksheet summary
        print("\nüìã WORKSHEET:")
        print(f"   Goals: {len(worksheet.get('goals', []))}")
        print(f"   Applications: {len(worksheet.get('applications', []))}")
        print(f"   Vocabulary Terms: {len(worksheet.get('vocabulary', []))}")
        
        # Summary preview
        print("\nüìÑ SUMMARY:")
        summary_text = summary.get('summary', '')
        print(f"   Content: {summary_text[:100]}..." if len(summary_text) > 100 else f"   Content: {summary_text}")
        
        # Mind map summary
        print("\nüß† MIND MAP:")
        nodes = mindmap.get('nodeDataArray', [])
        print(f"   Total Nodes: {len(nodes)}")
        if nodes:
            root = next((n for n in nodes if n.get('parent') is None), {})
            print(f"   Root Topic: {root.get('text', 'N/A')}")
            main_branches = [n for n in nodes if n.get('parent') == root.get('key', 0)]
            print(f"   Main Branches: {len(main_branches)}")
        
        # Save all results
        print("\nüíæ SAVING RESULTS:")
        for template_type, result in results.items():
            filename = f"example_{template_type}.json"
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            print(f"   ‚úÖ {template_type.title()}: {filename}")
        
        print("\nüéâ All templates generated successfully!")
        print("\nTemplate Types Available:")
        for i, template_type in enumerate(generator.get_supported_templates(), 1):
            print(f"   {i}. {template_type}")
        
        return results
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        raise

def demonstrate_mind_map_integration():
    """Demonstrate how the mind map integrates with the existing system."""
    
    print("\n" + "=" * 60)
    print("üó∫Ô∏è MIND MAP INTEGRATION DEMONSTRATION")
    print("=" * 60)
    
    generator = TemplateGenerator()
    
    # Show that mind map follows the same pattern as other templates
    print("\n1. Using the general template method:")
    mindmap1 = generator.generate_template(
        template_type="mindmap",
        content="Sample content for mind map generation"
    )
    print(f"   ‚úÖ Generated via generate_template(): {len(mindmap1.get('nodeDataArray', []))} nodes")
    
    print("\n2. Using the specific convenience method:")
    mindmap2 = generator.generate_mindmap(
        content="Sample content for mind map generation"
    )
    print(f"   ‚úÖ Generated via generate_mindmap(): {len(mindmap2.get('nodeDataArray', []))} nodes")
    
    print("\n3. Mind map structure follows GoJS format:")
    print(f"   Class: {mindmap1.get('class', 'N/A')}")
    print(f"   Has nodeDataArray: {'nodeDataArray' in mindmap1}")
    print(f"   Compatible with GoJS: ‚úÖ")
    
    print("\n4. Includes same metadata as other templates:")
    metadata = mindmap1.get('_metadata', {})
    print(f"   Language detected: {metadata.get('language', 'N/A')}")
    print(f"   Content analysis: {'content_analysis' in metadata}")
    print(f"   Generation params: {'generation_params' in metadata}")

if __name__ == "__main__":
    try:
        # Run comprehensive example
        results = comprehensive_example()
        
        # Demonstrate integration
        demonstrate_mind_map_integration()
        
        print("\n‚ú® Mind map successfully integrated into the template generation system!")
        
    except Exception as e:
        print(f"\n‚ùå Example failed: {e}")
        import traceback
        traceback.print_exc()
